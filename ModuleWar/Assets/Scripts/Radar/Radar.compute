#pragma kernel CSMain

RWTexture2D<float4> Result;
RWTexture2D<float4> Input; 
RWTexture2D<float4> LerpLayer;

float DeltaTime;
float Progress;
float Speed;
float Multiplier;

float Epsilon = 1e-10;

float3 RGBtoHCV(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return float3(H, C, Q.x);
}

float3 RGBtoHSV(in float3 RGB)
{
    float3 HCV = RGBtoHCV(RGB);
    float S = HCV.y / (HCV.z + Epsilon);
    return float3(HCV.x, S, HCV.z);
}

float lerp(float start, float end, float t) {
    return start * (1 - t) + end * t;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 color = Result[id.xy];

    float radius = sqrt(2) * 128 * (max(0, Progress - 0.4));
    int2 position = id.xy;

    if (pow(position.x - 64, 2) + pow(position.y - 64, 2) < pow(radius, 2)
        && pow(position.x - 64, 2) + pow(position.y - 64, 2) > pow(radius - 5, 2)) {
        color = lerp(color, Input[id.xy], Speed * DeltaTime);
    }
    else {
        //color = 0;
    }

    //color += Input[id.xy];
    
    //color = lerp(color, 0, Speed * DeltaTime);

    Result[id.xy] = color;
}


